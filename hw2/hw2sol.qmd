---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 9 @ 11:59PM
author: "Yue Wang  UID:005704481"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
execute:
  eval: True    
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(data.table)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display memory information of your computer
```{r}
memuse::Sys.meminfo()
```

In this exercise, we explore various tools for ingesting the [MIMIC-IV](https://mimic.mit.edu/docs/iv/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2024winter/hw/hw1/hw1.html).

Display the contents of MIMIC `hosp` and `icu` data folders:

```{bash}
ls -l ~/mimic/hosp/
```

```{bash}
ls -l ~/mimic/icu/
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

### Q1.1 Speed, memory, and data types

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three functions: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the data.table package.

Which function is fastest? Is there difference in the (default) parsed data types? How much memory does each resultant dataframe or tibble use? (Hint: `system.time` measures run times; `pryr::object_size` measures memory usage.) 

**Answer:** By running the code below, we can tell that `fread` is the fastest.
`read.csv` used 158.71 MB, `read_csv` used 55.31 MB, `fread` used 50.13 MB. 

```{r}
mimic_path <-  "~/mimic"
system.time(
  rbase <- read.csv(str_c(mimic_path, "/hosp/admissions.csv.gz")))
pryr::object_size(rbase) 

system.time(
  rtidyv <- read_csv(str_c(mimic_path, "/hosp/admissions.csv.gz")))
pryr::object_size(rtidyv)

system.time(
  rfread <- fread(str_c(mimic_path, "/hosp/admissions.csv.gz")))
pryr::object_size(rfread)
  
```

**Answer:** `str` has been used to check the data types. The differences do 
exist across them. For example, `read.csv` and `fread` read id numbers 
(subject_id and hadm_id) as integers. While, `read_csv` read them as numeric.
Besides, both `read_csv` and `fread` parse time-related columns as POSIXct,
whereas `read.csv` read them as character strings.

```{r}
str(rbase)
```

```{r}
str(rtidyv)
```

```{r}
str(rfread)
```

### Q1.2 User-supplied data types

Re-ingest `admissions.csv.gz` by indicating appropriate column data types in `read_csv`. Does the run time change? How much memory does the result tibble use? (Hint: `col_types` argument in `read_csv`.)

**Answer:** Yes, the run time do change. By indicating the column data types,
the run time decrease a little bit. The memory use remains the same, took up 
55.31 MB.

```{r}
system.time(
  rtidyv_col <- read_csv(str_c(mimic_path, "/hosp/admissions.csv.gz"),
    col_types = 
      cols(
      subject_id = col_double(),
      hadm_id = col_double(),
      admittime = col_datetime(format = ""),
      dischtime = col_datetime(format = ""),
      deathtime = col_datetime(format = ""),
      admission_type = col_character(),
      admit_provider_id = col_character(),
      admission_location = col_character(),
      discharge_location = col_character(),
      insurance = col_character(),
      language = col_character(),
      marital_status = col_character(),
      race = col_character(),
      edregtime = col_datetime(format = ""),
      edouttime = col_datetime(format = ""),
      hospital_expire_flag = col_double())))
pryr::object_size(rtidyv_col)

```


## Q2. Ingest big data files

<p align="center">
  <img src="./bigfile.png" width="50%">
</p>

Let us focus on a bigger file, `labevents.csv.gz`, which is about 125x bigger than `admissions.csv.gz`.
```{bash}
ls -l ~/mimic/hosp/labevents.csv.gz
```
Display the first 10 lines of this file.
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head -10
```

### Q2.1 Ingest `labevents.csv.gz` by `read_csv`

<p align="center">
  <img src="./readr_logo.png" width="20%">
</p>

Try to ingest `labevents.csv.gz` using `read_csv`. What happens? If it takes more than 5 minutes on your computer, then abort the program and report your findings.

**Answer:** It took me more than 5 minutes, so I aborted the program. 
`labevents.csv.gz` is too big for my computer to run, my computer do not have
enough ram for it.
```{r}
##  system.time(
##    rtidyv_lab <- read_csv(str_c(mimic_path, "/hosp/labevents.csv.gz")))
##  pryr::object_size(rtidyv_lab)
```


### Q2.2 Ingest selected columns of `labevents.csv.gz` by `read_csv`

Try to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz` using `read_csv`.  Does this solve the ingestion issue? (Hint: `col_select` argument in `read_csv`.)

**Answer:** For this question, my computer still cannot give me any results
within 5 minutes. Thus, I aborted it. My computer seems to not have enough ram
for this question also.
```{r}
##  system.time(
##    rtidyv_lab_col <- read_csv(str_c(mimic_path, "/hosp/labevents.csv.gz"),
##      col_select = c("subject_id", "itemid", "charttime", "valuenum")))
##  pryr::object_size(rtidyv_lab_col)

```

### Q2.3 Ingest subset of `labevents.csv.gz`

<p align="center">
  <img src="./linux_logo.png" width="20%">
</p>

Our first strategy to handle this big data file is to make a subset of the `labevents` data.  Read the [MIMIC documentation](https://mimic.mit.edu/docs/iv/modules/hosp/labevents/) for the content in data file `labevents.csv`.

In later exercises, we will only be interested in the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) and the following columns: `subject_id`, `itemid`, `charttime`, `valuenum`. Write a Bash command to extract these columns and rows from `labevents.csv.gz` and save the result to a new file `labevents_filtered.csv.gz` in the current working directory. (Hint: use `zcat <` to pipe the output of `labevents.csv.gz` to `awk` and then to `gzip` to compress the output. To save render time, put `#| eval: false` at the beginning of this code chunk.)

```{bash}
#| eval: false
zcat ~/mimic/hosp/labevents.csv.gz | awk -F, 'BEGIN {OFS=FS} 
  NR == 1 || $5 == 50912 || $5 == 50971 || $5 == 50983 || $5 == 50902 || 
  $5 == 50882 || $5 == 51221 || $5 == 51301 || $5 == 50931 { 
  print $2, $5, $7, $10
  }' | gzip > labevents_filtered.csv.gz

```

Display the first 10 lines of the new file `labevents_filtered.csv.gz`. How many lines are in this new file? How long does it take `read_csv` to ingest `labevents_filtered.csv.gz`?


```{bash}
zcat  labevents_filtered.csv.gz | head -11
```
**Answer:** The code above show the first 10 lines of the new file.
Bt running the code below, we can tell there are 24,855,909 rows in this file
excluding the first line. It takes around 6 seconds to read.
```{bash}
zcat  labevents_filtered.csv.gz | tail -n +2 | wc -l
```

```{r}
filter_path <- "labevents_filtered.csv.gz"
system.time(
  lab_filter <- read_csv(filter_path))
```

### Q2.4 Ingest `labevents.csv` by Apache Arrow

<p align="center">
  <img src="./arrow_logo.png" width="30%">
</p>

Our second strategy is to use [Apache Arrow](https://arrow.apache.org/) for larger-than-memory data analytics. Unfortunately Arrow does not work with gz files directly. First decompress `labevents.csv.gz` to `labevents.csv` and put it in the current working directory. To save render time, put `#| eval: false` at the beginning of this code chunk.

```{bash}
#| eval: false
cd ~/mimic/hosp
gzip -cd labevents.csv.gz > ~/203b-lecture/203b-hw/hw2/labevents.csv

```
Then use [`arrow::open_dataset`](https://arrow.apache.org/docs/r/reference/open_dataset.html) to ingest `labevents.csv`, select columns, and filter `itemid` as in Q2.3. How long does the ingest+select+filter process take? Display the number of rows and the first 10 rows of the result tibble, and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)
```{r}
file_path <- "labevents.csv"
item_ids <- c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)
system.time((
  labevents_arrow <- arrow::open_dataset(file_path, format = "csv") %>%
    select(subject_id, itemid, charttime, valuenum) %>%
    filter(itemid %in% item_ids) %>%
    collect()))
```
**Answer:** By running the code above, the time to run the whole process is 
shown above, including ingest, select and filter. There are 24,855,909 rows, 
and the first 10 lines are shown below. The results matched those in Q2.3.

```{r}
num_rows <- nrow(labevents_arrow)
print(num_rows)
first_10_rows <- head(labevents_arrow, 10)
print(first_10_rows)

```

Write a few sentences to explain what is Apache Arrow. Imagine you want to explain it to a layman in an elevator. 

**Answer:** Apache Arrow is like a universal language for data. It allows
data to be shared and translated by different systems and software without
translation, making data processing much faster and more efficient. You can
imagine that it's like there is a book written in a language that everyone can 
understand, no matter what language they speak.

### Q2.5 Compress `labevents.csv` to Parquet format and ingest/select/filter

<p align="center">
  <img src="./parquet_logo.png" width="30%">
</p>

Re-write the csv file `labevents.csv` in the binary Parquet format (Hint: [`arrow::write_dataset`](https://arrow.apache.org/docs/r/reference/write_dataset.html).) How large is the Parquet file(s)? How long does the ingest+select+filter process of the Parquet file(s) take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)
```{r, eval=FALSE}
labevents_arrow <- arrow::open_dataset("labevents.csv", format = "csv")
arrow::write_dataset (labevents_arrow, "labevents.parquet")
```

```{r}
file_size <- file.info("labevents.parquet")$size
print(file_size)
```
**Answer:** The file size is 4096 bytes.By running the code below, we can tell
the time for the whole process. The number of rows and the first 10 lines
are the same as those in Q2.3.

```{r}
system.time(
  labevents_parquet <- arrow::open_dataset("labevents.parquet") %>%
    select(subject_id, itemid, charttime, valuenum) %>%
    filter(itemid %in% item_ids) %>%
    collect())

```
```{r}
num_rows_parquet <- nrow(labevents_parquet)
print(num_rows_parquet)
first_10_rows_parquet <- head(labevents_parquet, 10)
print(first_10_rows_parquet)

```

Write a few sentences to explain what is the Parquet format. Imagine you want to explain it to a layman in an elevator.

**Answer:** The Parquet format is a type of data storage format that is highly 
efficient for storing and processing large amounts of data. It's like you have 
an amazing organizer that not only arranges everything you have in order but 
also compresses them so they take up less space, without losing any content. 
When you need to find something, it shows you only the key words, which saves 
you time and space, making it an excellent choice for working with big data.

### Q2.6 DuckDB

<p align="center">
  <img src="./duckdb_logo.png" width="20%">
</p>

Ingest the Parquet file, convert it to a DuckDB table by [`arrow::to_duckdb`](https://arrow.apache.org/docs/r/reference/to_duckdb.html), select columns, and filter rows as in Q2.5. How long does the ingest+convert+select+filter process take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

```{r}
system.time(
  labevents_duckdb <- arrow::open_dataset("labevents.parquet") %>%
    arrow::to_duckdb())
```
```{r}
system.time(
  labevents_duckdb <- labevents_duckdb %>%
    select(subject_id, itemid, charttime, valuenum) %>%
    filter(itemid %in% item_ids) %>%
    arrange(subject_id, charttime) %>%
    collect())


```
**Answer:** The time to run the whole process would be add the two elapsed time
above together. The number of rows and the first 10 lines
are the same as those in Q2.3.

```{r}
num_rows_duckdb <- nrow(labevents_duckdb)
print(num_rows_duckdb)
first_10_rows_duckdb <- head(labevents_duckdb, 10)
print(first_10_rows_duckdb)

```
Write a few sentences to explain what is DuckDB. Imagine you want to explain it to a layman in an elevator.

**Answer:** DuckDB is an in-process SQL OLAP (Online Analytical Processing) 
database management system. It helps quickly analyze large amounts of data 
right where it is stored without the need for a separate server or 
complex infrastructure. It's quite fast and efficient, making it a great tool 
for data scientists.

## Q3. Ingest and filter `chartevents.csv.gz`

[`chartevents.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/chartevents/) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head -10
```
[`d_items.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/d_items/) is the dictionary for the `itemid` in `chartevents.csv.gz`.
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head -10
```
In later exercises, we are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items, using the favorite method you learnt in Q2. 

```{bash}
#| eval: false
cd  ~/mimic/icu
gzip -cd chartevents.csv.gz > ~/203b-lecture/203b-hw/hw2/chartevents.csv

```

Document the steps and show code. Display the number of rows and the first 10 rows of the result tibble.

```{r}

item_ids_chart <- c(220045, 220181, 220179, 223761, 220210)
chartevents_vital <- open_dataset("chartevents.csv", format = "csv") %>%
  select(subject_id, itemid, charttime, valuenum) %>%
  filter(itemid %in% item_ids_chart) %>%
  arrange(subject_id, charttime) %>%
  collect()
num_rows_chart <- nrow(chartevents_vital)
print(num_rows_chart)
first_10_rows_chart <- head(chartevents_vital, 10)
print(first_10_rows_chart)

```

